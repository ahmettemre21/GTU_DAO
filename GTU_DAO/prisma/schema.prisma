// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  kycStatus      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  role           String    @default("MEMBER") // MEMBER, CORE_TEAM, ADMIN_CANDIDATE, PRESIDENT
  coreTeamRole   String? // SOFTWARE, DESIGN, MEDIA, FINANCE, ORGANIZATION
  walletAddress  String    @unique
  verified       Boolean   @default(false)
  joinedAt       DateTime  @default(now())
  
  // Relations
  proposals      Proposal[]
  votes          Vote[]
  applications   Application[]
  kycVerifications KYCVerification[]
  activityLogs   ActivityLog[]
  adminCouncil   AdminCouncil[]
  
  @@map("users")
}

model AdminCouncil {
  id        String            @id @default(cuid())
  userId    String
  position  String // PRESIDENT, VICE_PRESIDENT, SOFTWARE_HEAD, MEDIA_HEAD, DESIGN_COORDINATOR, FINANCE_DIRECTOR, EVENT_HEAD, FINANCE_AUDIT, PAST_COUNCIL_OBSERVER
  termStart DateTime
  termEnd   DateTime
  isActive  Boolean           @default(true)
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("admin_council")
}

model Proposal {
  id                String       @id @default(cuid())
  title             String
  description       String
  category          String // EVENT, SYSTEM_RULE, FINANCIAL, OTHER
  proposedBy        String
  status            String @default("PENDING") // PENDING, VOTING, APPROVED, REJECTED
  requiredVoteLevel String // ALL_MEMBERS, CORE_TEAM, COUNCIL
  votesYes          Int            @default(0)
  votesNo           Int            @default(0)
  voteDeadline      DateTime
  createdAt         DateTime       @default(now())
  
  proposer User   @relation(fields: [proposedBy], references: [id])
  votes    Vote[]
  
  @@map("proposals")
}

model Vote {
  id         String   @id @default(cuid())
  proposalId String
  voterId    String
  vote       String // YES, NO
  votedAt    DateTime @default(now())
  
  proposal Proposal @relation(fields: [proposalId], references: [id])
  voter    User     @relation(fields: [voterId], references: [id])
  
  @@unique([proposalId, voterId])
  @@map("votes")
}

model Application {
  id              String            @id @default(cuid())
  userId          String
  type            String // PRESIDENCY, CORE_TEAM
  appliedForRole  String
  status          String @default("UNDER_REVIEW") // UNDER_REVIEW, ACCEPTED, REJECTED
  termAppliedFor  String
  submittedAt     DateTime          @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("applications")
}

model KYCVerification {
  id           String        @id @default(cuid())
  userId       String
  documentHash String
  status       String     @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy   String?
  createdAt    DateTime      @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("kyc_verifications")
}

model ActivityLog {
  id          String     @id @default(cuid())
  userId      String
  actionType  String // PROPOSAL_SUBMITTED, VOTE_CAST, ROLE_CHANGED, JOINED_COUNCIL
  description String
  timestamp   DateTime   @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("activity_logs")
}